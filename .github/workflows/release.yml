name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  build-and-release:
    name: Build and Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # macOS
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
          # Linux
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          # Windows
          - os: windows-latest
            target: x86_64-pc-windows-msvc
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation dependencies
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Run tests
        run: cargo test --verbose

      - name: Build binary
        run: |
          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            export CC=aarch64-linux-gnu-gcc
            export CXX=aarch64-linux-gnu-g++
            export AR=aarch64-linux-gnu-ar
            export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
          fi
          cargo build --release --target ${{ matrix.target }}

      - name: Create archive
        shell: bash
        run: |
          mkdir -p release-artifacts
          
          # Determine binary name (Windows has .exe extension)
          if [[ "${{ matrix.target }}" == *"windows"* ]]; then
            BINARY_NAME="fdml.exe"
            ARCHIVE_NAME="fdml-${{ matrix.target }}.zip"
          else
            BINARY_NAME="fdml"
            ARCHIVE_NAME="fdml-${{ matrix.target }}.tar.gz"
          fi
          
          # Check if binary exists and copy it
          if [ -f "target/${{ matrix.target }}/release/$BINARY_NAME" ]; then
            cp "target/${{ matrix.target }}/release/$BINARY_NAME" release-artifacts/
            cd release-artifacts
            
            # Create appropriate archive format
            if [[ "${{ matrix.target }}" == *"windows"* ]]; then
              7z a "../$ARCHIVE_NAME" "$BINARY_NAME"
            else
              tar -czf "../$ARCHIVE_NAME" "$BINARY_NAME"
            fi
          else
            echo "Binary not found at target/${{ matrix.target }}/release/$BINARY_NAME"
            ls -la target/${{ matrix.target }}/release/
            exit 1
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: fdml-${{ matrix.target }}
          path: fdml-${{ matrix.target }}.*

  create-release:
    name: Create GitHub Release
    needs: build-and-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Extract version from tag
          VERSION=${GITHUB_REF#refs/tags/}
          
          # Create release
          gh release create "$VERSION" \
            --title "Release $VERSION" \
            --notes "Release $VERSION of FDML CLI tool with binaries for macOS (Intel & Apple Silicon), Linux (x64 & ARM64), and Windows (x64)." \
            --verify-tag \
            artifacts/fdml-x86_64-apple-darwin/fdml-x86_64-apple-darwin.tar.gz \
            artifacts/fdml-aarch64-apple-darwin/fdml-aarch64-apple-darwin.tar.gz \
            artifacts/fdml-x86_64-unknown-linux-gnu/fdml-x86_64-unknown-linux-gnu.tar.gz \
            artifacts/fdml-aarch64-unknown-linux-gnu/fdml-aarch64-unknown-linux-gnu.tar.gz \
            artifacts/fdml-x86_64-pc-windows-msvc/fdml-x86_64-pc-windows-msvc.zip